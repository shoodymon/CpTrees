<Page x:Class="Tree_Structures.View.Pages.BTreePage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:Tree_Structures.View.Pages"
      xmlns:avalon="http://icsharpcode.net/sharpdevelop/avalonedit"
      mc:Ignorable="d" 
      d:DesignHeight="450" d:DesignWidth="800"
      Title="BTreePage">

    <ScrollViewer VerticalScrollBarVisibility="Auto">
        <StackPanel Margin="20">
            <TextBlock Text="Структура данных B-дерево" Style="{StaticResource HeadingStyle}"/>

            <TextBlock Style="{StaticResource DescriptionStyle}">
                B-дерево – это сбалансированное дерево поиска, в котором каждый узел содержит множество ключей и имеет более двух потомков.
                <LineBreak />
                <LineBreak />
                Здесь количество ключей в узле и количество его потомков зависит от порядка B-дерева. Каждое B-дерево имеет порядок.            
                <LineBreak />
                <LineBreak />
                B-дерево порядка m обладает следующими свойствами:
                <LineBreak />
                <LineBreak />
                Свойство 1: Глубина всех листьев одинакова.
                <LineBreak />
                Свойство 2: Все узлы, кроме корня должны иметь как минимум (m/2) – 1 ключей и максимум m-1 ключей.
                <LineBreak />
                Свойство 3: Все узлы без листьев, кроме корня (т.е. все внутренние узлы), должны иметь минимум m/2 потомков.
                <LineBreak />
                Свойство 4: Если корень – это узел не содержащий листьев, он должен иметь минимум 2 потомка.
                <LineBreak />
                Свойство 5: Узел без листьев с n-1 ключами должен иметь n потомков.
                <LineBreak />
                Свойство 6: Все ключи в узле должны располагаться в порядке возрастания их значений.
                <LineBreak />
                <LineBreak />
                Например, B-дерево 4 порядка содержит максимум 3 значения ключа и максимум 4 потомка для каждого узла.
            </TextBlock>

            <Image Source="/Assets/BT/BT_view.png" 
                   Style="{StaticResource ImageStyle}"/>
            <TextBlock Text="Рис. - B-дерево 4 порядка" 
                       Style="{StaticResource CaptionStyle}"/>

            <TextBlock Style="{StaticResource SubtitleStyle}">
                Операции над B-деревом
            </TextBlock>

            <TextBlock Style="{StaticResource DescriptionStyle}">
                Над B-деревом можно проводить следующие операции:
                <LineBreak />
                <LineBreak />
                1. Поиск
                <LineBreak />
                2. Вставка
                <LineBreak />
                3. Удаление
            </TextBlock>

            <TextBlock Style="{StaticResource SubtitleStyle}">
                Поиск по B-дереву
            </TextBlock>

            <TextBlock Style="{StaticResource DescriptionStyle}">
                Поиск по B-дереву аналогичен поиску по двоичному дереву поиска. В двоичном дереве поиска поиск начинается с корня и каждый раз принимается двустороннее решение (пойти по левому поддереву или по правому). 
                <LineBreak />
                В В-дереве поиск также начинается с корневого узла, но на каждом шаге принимается n-стороннее решение, где n – это общее количество потомков рассматриваемого узла. 
                <LineBreak />
                В В-дереве сложность поиска составляет O(log n). Поиск происходит следующим образом:
                <LineBreak />
                <LineBreak />
                Шаг 1: Считать элемент для поиска.
                <LineBreak />
                Шаг 2: Сравнить искомый элемент с первым значением ключа в корневом узле дерева.
                <LineBreak />
                Шаг 3: Если они совпадают, вывести: «Искомый узел найден!» и завершить поиск.
                <LineBreak />
                Шаг 4: Если они не совпадают, проверить больше или меньше значение элемента, чем текущее значение ключа.
                <LineBreak />
                Шаг 5: Если искомый элемент меньше, продолжить поиск по левому поддереву.
                <LineBreak />
                Шаг 6: Если искомый элемент больше, сравнить элемент со следующим значением ключа в узле и повторять Шаги 3, 4, 5 и 6 пока не будет найдено совпадение или пока искомый элемент не будет сравнен с последним значением ключа в узле-листе.
                <LineBreak />
                Шаг 7: Если последнее значение ключа в узле-листе не совпало с искомым, вывести «Элемент не найден!» и завершить поиск.
            </TextBlock>

            <TextBlock Style="{StaticResource SubtitleStyle}">
                Операция вставки в B-дерево
            </TextBlock>

            <TextBlock Style="{StaticResource DescriptionStyle}">
                В В-дереве новый элемент может быть добавлен только в узел-лист. Это значит, что новая пара ключ-значение всегда добавляется только к узлу-листу. Вставка происходит следующим образом:
                <LineBreak />
                <LineBreak />
                Шаг 1: Проверить пустое ли дерево.
                <LineBreak />
                Шаг 2: Если дерево пустое, создать новый узел с новым значением ключа и его принять за корневой узел.
                <LineBreak />
                Шаг 3: Если дерево не пустое, найти подходящий узел-лист, к которому будет добавлено новое значение, используя логику дерева двоичного поиска.
                <LineBreak />
                Шаг 4: Если в текущем узле-листе есть незанятая ячейка, добавить новый ключ-значение к текущему узлу-листу, следуя возрастающему порядку значений ключей внутри узла.
                <LineBreak />
                Шаг 5: Если текущий узел полон и не имеет свободных ячеек, разделите узел-лист, отправив среднее значение родительскому узлу. Повторяйте шаг, пока отправляемое значение не будет зафиксировано в узле.
                <LineBreak />
                Шаг 6: Если разделение происходит с корнем дерева, тогда среднее значение становится новым корнем дерева и высота дерева увеличивается на единицу.
                <LineBreak />
                <LineBreak />
                Пример:
                <LineBreak />
                <LineBreak />
                Давайте создадим B-дерево порядка 3, добавляя в него числа от 1 до 10.
                <LineBreak />
                <LineBreak />
                Insert(1):
                <LineBreak />
                Поскольку «1» — это первый элемент дерева – он вставляется в новый узел и этот узел становится корнем дерева.
            </TextBlock>

            <Image Source="/Assets/BT/BT_insert.png"
                   Height="400" Width="300"
                   Style="{StaticResource ImageStyle}"/>

            <TextBlock Style="{StaticResource DescriptionStyle}">
                Insert(2):
                <LineBreak />
                Элемент «2» добавляется к существующему узлу-листу. Сейчас у нас всего один узел, следовательно он является и корнем и листом одновременно. В этом листе имеется пустая ячейка. Тогда «2» встает в эту пустую ячейку.
            </TextBlock>

            <Image Source="/Assets/BT/BT_insert_2.png"
                   Height="400" Width="300"
                   Style="{StaticResource ImageStyle}"/>

            <TextBlock Style="{StaticResource DescriptionStyle}">
                Insert(3):
                <LineBreak />
                Элемент «3» добавляется к существующему узлу-листу. Сейчас у нас только один узел, который одновременно является и корнем и листом. У этого листа нет пустой ячейки. Поэтому мы разделяем этот узел, отправляя среднее значение (2) в родительский узел. Однако у текущего узла родительского узла нет. Поэтому среднее значение становится корневым узлом дерева.
            </TextBlock>

            <Image Source="/Assets/BT/BT_insert_3.png"
                   Style="{StaticResource ImageStyle}"/>

            <TextBlock Style="{StaticResource DescriptionStyle}">
                Insert(4):
                <LineBreak />   
                Элемент «4» больше корневого узла со значением «2», при этом корневой узел не является листом. Поэтому мы двигаемся по правому поддереву от «2». Мы приходим к узлу-листу со значением «3», у которого имеется пустая ячейка. Таким образом, мы можем вставить элемент «4» в эту пустую ячейку.
            </TextBlock>

            <Image Source="/Assets/BT/BT_insert_4.png"
                   Style="{StaticResource ImageStyle}"/>

            <TextBlock Style="{StaticResource DescriptionStyle}">
                Insert(5):
                <LineBreak />
                Элемент «5» больше корневого узла со значением «2», при этом корневой узел не является листом. Поэтому мы двигаемся по правому поддереву от «2». Мы приходим к узлу-листу и обнаруживаем, что он уже полон и не имеет пустых ячеек. Тогда мы делим этот узел, отправляя среднее значение (4) в родительский узел (2). В родительском узле есть для него пустая ячейка, поэтому значение «4» добавляется к узлу, в котором уже есть значение «2», а новый элемент «5» добавляется в качестве нового листа.
            </TextBlock>

            <Image Source="/Assets/BT/BT_insert_5.png"
                   Style="{StaticResource ImageStyle}"/>

            <TextBlock Style="{StaticResource DescriptionStyle}">
                Insert(6):
                <LineBreak />
                Элемент «6» больше, чем элементы корня «2» и «4», который не является листом. Мы двигаемся по правому поддереву от элемента «4». Мы достигаем листа со значением «5», у которого есть пустая ячейка, поэтому элемент «6» помещаем как раз в нее.
            </TextBlock>

            <Image Source="/Assets/BT/BT_insert_6.png"
                   Style="{StaticResource ImageStyle}"/>

            <TextBlock Style="{StaticResource DescriptionStyle}">
                Insert(7):
                <LineBreak />
                Элемент «7» больше, чем элементы корня «2» и «4», который не является листом. Мы двигаемся по правому поддереву от элемента «4». Мы достигаем узла-листа и видим, что он полон. Мы делим этот узел, отправляя среднее значение «6» вверх к родительскому узлу с элементами «2» и «4». Однако родительский узел тоже полон, поэтому мы делим узел с элементами «2» и «4», отправляя значение «4» родительскому узлу. Только вот этого узла еще нет. В таком случае узел с элементом «4» становится новым корнем дерева.
            </TextBlock>

            <Image Source="/Assets/BT/BT_insert_7.png"
       Style="{StaticResource ImageStyle}"/>

            <TextBlock Style="{StaticResource DescriptionStyle}">
                Insert(8):
                <LineBreak />
                Элемент «8» больше корневого узла со значением «4», при этом корневой узел не является листом. Мы двигаемся по правому поддереву от элемента «4» и приходим к узлу со значением «6». «8» больше «6» и узел с элементом «6» не является листом, поэтому двигаемся по правому поддереву от «6». Мы достигаем узла-листа с «7», у которого есть пустая ячейка, поэтому в нее мы помещаем «8».
            </TextBlock>

            <Image Source="/Assets/BT/BT_insert_8.png"
                   Style="{StaticResource ImageStyle}"/>

            <TextBlock Style="{StaticResource DescriptionStyle}">
                Insert(9):
                <LineBreak />
                Элемент «9» больше корневого узла со значением «4», при этом корневой узел не является листом. Мы двигаемся по правому поддереву от элемента «4» и приходим к узлу со значением «6». «9» больше «6» и узел с элементом «6» не является листом, поэтому двигаемся по правому поддереву от «6». Мы достигаем узла-листа со значениями «7» и «8». Он полон. Мы делим этот узел, отправляя среднее значение (8) родительскому узлу. Родительский узел «6» имеет пустую ячейку, поэтому мы помещаем «8» в нее. При этом новый элемент «9» добавляется в узел-лист.
            </TextBlock>

            <Image Source="/Assets/BT/BT_insert_9.png"
                   Style="{StaticResource ImageStyle}"/>

            <TextBlock Style="{StaticResource DescriptionStyle}">
                Insert(10):
                <LineBreak />
                Элемент «10» больше корневого узла со значением «4», при этом корневой узел не является листом. Мы двигаемся по правому поддереву от элемента «4» и приходим к узлу со значениями «6» и «8». «10» больше «6» и «8» и узел с этими элементами не является листом, поэтому двигаемся по правому поддереву от «8». Мы достигаем узла-листа со значением «9». У него есть пустая ячейка, поэтому туда мы помещаем «10».
            </TextBlock>

            <Image Source="/Assets/BT/BT_insert_10.png"
                   Style="{StaticResource ImageStyle}"/>
        </StackPanel>
    </ScrollViewer>
</Page>
